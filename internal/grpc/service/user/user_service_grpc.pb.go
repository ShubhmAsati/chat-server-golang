// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*AddUserResponse, error)
	GetUserByMobileNos(ctx context.Context, in *GetUserByMobileNosRequest, opts ...grpc.CallOption) (*GetUserByMobileNosResponse, error)
	UploadProfilePic(ctx context.Context, in *UploadProfilePicRequest, opts ...grpc.CallOption) (*StatusOkResponse, error)
	SetMyStatus(ctx context.Context, in *UserStatus, opts ...grpc.CallOption) (*StatusOkResponse, error)
	IamTyping(ctx context.Context, in *Typing, opts ...grpc.CallOption) (*StatusOkResponse, error)
	LoadMyMessages(ctx context.Context, in *User, opts ...grpc.CallOption) (*MyMessages, error)
	GetUserByUserId(ctx context.Context, in *GetUserByUserIdRequest, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Add(ctx context.Context, in *User, opts ...grpc.CallOption) (*AddUserResponse, error) {
	out := new(AddUserResponse)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByMobileNos(ctx context.Context, in *GetUserByMobileNosRequest, opts ...grpc.CallOption) (*GetUserByMobileNosResponse, error) {
	out := new(GetUserByMobileNosResponse)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/getUserByMobileNos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UploadProfilePic(ctx context.Context, in *UploadProfilePicRequest, opts ...grpc.CallOption) (*StatusOkResponse, error) {
	out := new(StatusOkResponse)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/uploadProfilePic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetMyStatus(ctx context.Context, in *UserStatus, opts ...grpc.CallOption) (*StatusOkResponse, error) {
	out := new(StatusOkResponse)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/setMyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IamTyping(ctx context.Context, in *Typing, opts ...grpc.CallOption) (*StatusOkResponse, error) {
	out := new(StatusOkResponse)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/iamTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoadMyMessages(ctx context.Context, in *User, opts ...grpc.CallOption) (*MyMessages, error) {
	out := new(MyMessages)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/loadMyMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByUserId(ctx context.Context, in *GetUserByUserIdRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/user_grpc.UserService/getUserByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Add(context.Context, *User) (*AddUserResponse, error)
	GetUserByMobileNos(context.Context, *GetUserByMobileNosRequest) (*GetUserByMobileNosResponse, error)
	UploadProfilePic(context.Context, *UploadProfilePicRequest) (*StatusOkResponse, error)
	SetMyStatus(context.Context, *UserStatus) (*StatusOkResponse, error)
	IamTyping(context.Context, *Typing) (*StatusOkResponse, error)
	LoadMyMessages(context.Context, *User) (*MyMessages, error)
	GetUserByUserId(context.Context, *GetUserByUserIdRequest) (*User, error)
	MustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) Add(context.Context, *User) (*AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (*UnimplementedUserServiceServer) GetUserByMobileNos(context.Context, *GetUserByMobileNosRequest) (*GetUserByMobileNosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByMobileNos not implemented")
}
func (*UnimplementedUserServiceServer) UploadProfilePic(context.Context, *UploadProfilePicRequest) (*StatusOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProfilePic not implemented")
}
func (*UnimplementedUserServiceServer) SetMyStatus(context.Context, *UserStatus) (*StatusOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMyStatus not implemented")
}
func (*UnimplementedUserServiceServer) IamTyping(context.Context, *Typing) (*StatusOkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IamTyping not implemented")
}
func (*UnimplementedUserServiceServer) LoadMyMessages(context.Context, *User) (*MyMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMyMessages not implemented")
}
func (*UnimplementedUserServiceServer) GetUserByUserId(context.Context, *GetUserByUserIdRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUserId not implemented")
}
func (*UnimplementedUserServiceServer) MustEmbedUnimplementedUserServiceServer() {}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Add(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByMobileNos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByMobileNosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByMobileNos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/GetUserByMobileNos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByMobileNos(ctx, req.(*GetUserByMobileNosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UploadProfilePic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProfilePicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UploadProfilePic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/UploadProfilePic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UploadProfilePic(ctx, req.(*UploadProfilePicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetMyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetMyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/SetMyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetMyStatus(ctx, req.(*UserStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IamTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Typing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IamTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/IamTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IamTyping(ctx, req.(*Typing))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoadMyMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoadMyMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/LoadMyMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoadMyMessages(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_grpc.UserService/GetUserByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByUserId(ctx, req.(*GetUserByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user_grpc.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add",
			Handler:    _UserService_Add_Handler,
		},
		{
			MethodName: "getUserByMobileNos",
			Handler:    _UserService_GetUserByMobileNos_Handler,
		},
		{
			MethodName: "uploadProfilePic",
			Handler:    _UserService_UploadProfilePic_Handler,
		},
		{
			MethodName: "setMyStatus",
			Handler:    _UserService_SetMyStatus_Handler,
		},
		{
			MethodName: "iamTyping",
			Handler:    _UserService_IamTyping_Handler,
		},
		{
			MethodName: "loadMyMessages",
			Handler:    _UserService_LoadMyMessages_Handler,
		},
		{
			MethodName: "getUserByUserId",
			Handler:    _UserService_GetUserByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/user_service.proto",
}
